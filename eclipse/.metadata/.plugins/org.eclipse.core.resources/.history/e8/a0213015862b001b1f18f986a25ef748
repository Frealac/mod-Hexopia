package com.hexopia.mod.proxy;

import java.awt.Color;
import java.lang.annotation.ElementType;

import org.lwjgl.opengl.GL11;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.renderer.block.model.ModelResourceLocation;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.client.event.RenderGameOverlayEvent;
import net.minecraftforge.client.model.ModelLoader;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.relauncher.Side;

public class ClientProxy extends CommonProxy
{
	@Override
	public void registerItemRenderer(Item item, int meta) 
	{
		ModelLoader.setCustomModelResourceLocation(item, meta, new ModelResourceLocation(item.getRegistryName(), "inventory"));
	}
	
	@Override
	public void registerVariantRenderer(Item item, int meta, String filename, String id) {
		// TODO Auto-generated method stub
		super.registerVariantRenderer(item, meta, filename, id);
	}
	
	@Override
	public void registerEntityRenderers() {
		// TODO Auto-generated method stub
		super.registerEntityRenderers();
	}
	
	@Override
	public void preInit() {
		// TODO Auto-generated method stub
		super.preInit();
	}	
	
	 @EventBusSubscriber
	    public class GameOverlayHandler
	    {
	        private final ResourceLocation emptyLife = new ResourceLocation("textures/gui/emptylife.png");
	        private final ResourceLocation fullLife = new ResourceLocation("textures/gui/fulllife.png");
	 
	        public final Minecraft MC = Minecraft.getMinecraft();
	 
	        @SubscribeEvent
	        public void renderGameOverlayPre(RenderGameOverlayEvent.Pre event)
	        {
	            if(event.getType().equals(ElementType.HEALTH))
	                event.setCanceled(true);
	        }
	 
	        @SubscribeEvent
	        public void renderGameOverlayPost(RenderGameOverlayEvent.Post event)
	        {
	            if(event.getType().equals(ElementType))
	            {
	                GL11.glColor4f(1, 1, 1, 1);
	                GL11.glEnable(GL11.GL_BLEND);
	                GL11.glBlendFunc(770, 771);
	                int width = event.getResolution().getScaledWidth();
	 
	                if(!MC.player.capabilities.disableDamage)
	                    drawHealth(event.getResolution(), MC.player);
	 
	                String s = MC.getConnection().getPlayerInfoMap().size() + "/" + MC.getConnection().currentServerMaxPlayers + " joueurs";
	                Gui.drawRect(width - 5 - MC.fontRenderer.getStringWidth(s), 2, width - 2, 4 + MC.fontRenderer.FONT_HEIGHT, Integer.MIN_VALUE);
	                MC.fontRenderer.drawString(s, width - 3 - MC.fontRenderer.getStringWidth(s), 4, Color.WHITE.getRGB());
	            }
	        }
	 
	        private void drawHealth(ScaledResolution res, EntityPlayer player)
	        {
	            MC.getTextureManager().bindTexture(emptyLife);
	            Gui.drawScaledCustomSizeModalRect(res.getScaledWidth() - 70, res.getScaledHeight() - 76, 0, 0, 64, 64, 64, 64, 64, 64);
	 
	            int percent = (int)(player.getHealth() * 64 / player.getMaxHealth());
	            if(percent > 0)
	            {
	                MC.getTextureManager().bindTexture(fullLife);
	                Gui.drawScaledCustomSizeModalRect(res.getScaledWidth() - 70, res.getScaledHeight() - 76 + (64 - percent), 0, 64 - percent, 64, percent, 64, percent, 64, 64);
	            }
	        }
	    }
}




