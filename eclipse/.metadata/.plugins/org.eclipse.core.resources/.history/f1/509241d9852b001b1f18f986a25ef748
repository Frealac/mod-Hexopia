package com.hexopia.mod;

import java.awt.Color;
import java.lang.annotation.ElementType;

import org.lwjgl.opengl.GL11;

import com.hexopia.mod.proxy.CommonProxy;
import com.hexopia.mod.tabs.TutoTab;
import com.hexopia.mod.util.Reference;
import com.hexopia.mod.util.handlers.RegistryHandler;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.client.event.RenderGameOverlayEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.Mod.Instance;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.relauncher.Side;

@Mod(modid = Reference.MODID, name = Reference.NAME, version = Reference.VERSION)
public class Main 
{
	
	
	@Instance
	public static Main instance;
	
    public static final CreativeTabs TUTO_TAB = new TutoTab("tuto");
	
	@SidedProxy(clientSide = Reference.CLIENT, serverSide = Reference.COMMON)
	public static CommonProxy proxy;
	
	public static org.apache.logging.log4j.Logger logger;
	
	@EventHandler
	public static void preInit(FMLPreInitializationEvent e)
	{
		logger = e.getModLog();
		
		proxy.preInit();
		
		RegistryHandler.preInitRegistries();
	}
	
	@EventHandler
	public static void init(FMLInitializationEvent e)
	{
		RegistryHandler.initRegistries();
	}
	
	@EventHandler
	public static void postInit(FMLPostInitializationEvent e)
	{
		
	}
	
	 @EventBusSubscriber(modid = TutorielMod.ID, value = {Side.CLIENT})
	    public class GameOverlayHandler
	    {
	        private static final ResourceLocation emptyLife = new ResourceLocation(TutorielMod.ID, "textures/gui/emptylife.png");
	        private static final ResourceLocation fullLife = new ResourceLocation(TutorielMod.ID, "textures/gui/fulllife.png");
	 
	        public static final Minecraft MC = Minecraft.getMinecraft();
	 
	        @SubscribeEvent
	        public static void renderGameOverlayPre(RenderGameOverlayEvent.Pre event)
	        {
	            if(event.getType().equals(ElementType.HEALTH))
	                event.setCanceled(true);
	        }
	 
	        @SubscribeEvent
	        public static void renderGameOverlayPost(RenderGameOverlayEvent.Post event)
	        {
	            if(event.getType().equals(ElementType.ALL))
	            {
	                GL11.glColor4f(1, 1, 1, 1);
	                GL11.glEnable(GL11.GL_BLEND);
	                GL11.glBlendFunc(770, 771);
	                int width = event.getResolution().getScaledWidth();
	 
	                if(!MC.player.capabilities.disableDamage)
	                    drawHealth(event.getResolution(), MC.player);
	 
	                String s = MC.getConnection().getPlayerInfoMap().size() + "/" + MC.getConnection().currentServerMaxPlayers + " joueurs";
	                Gui.drawRect(width - 5 - MC.fontRendererObj.getStringWidth(s), 2, width - 2, 4 + MC.fontRendererObj.FONT_HEIGHT, Integer.MIN_VALUE);
	                MC.fontRendererObj.drawString(s, width - 3 - MC.fontRendererObj.getStringWidth(s), 4, Color.WHITE.getRGB());
	            }
	        }
	 
	        private static void drawHealth(ScaledResolution res, EntityPlayer player)
	        {
	            MC.getTextureManager().bindTexture(emptyLife);
	            Gui.drawScaledCustomSizeModalRect(res.getScaledWidth() - 70, res.getScaledHeight() - 76, 0, 0, 64, 64, 64, 64, 64, 64);
	 
	            int percent = (int)(player.getHealth() * 64 / player.getMaxHealth());
	            if(percent > 0)
	            {
	                MC.getTextureManager().bindTexture(fullLife);
	                Gui.drawScaledCustomSizeModalRect(res.getScaledWidth() - 70, res.getScaledHeight() - 76 + (64 - percent), 0, 64 - percent, 64, percent, 64, percent, 64, 64);
	            }
	        }
	    }
}

}


